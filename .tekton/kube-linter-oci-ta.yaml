---
# This Task is based on task/kube-linter/0.1/kube-linter.yaml from https://github.com/tektoncd/catalog.git
# The main difference is that it relies on a Trusted Artifact, instead of a workspace, to provide
# the code to be scanned.
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: kube-linter-oci-ta
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Code Quality
    tekton.dev/tags: Kubernetes, Misconfiguration
    tekton.dev/displayName: "Kube-Linter"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task makes it possible to use kube-linter within Tekton Pipeline.
    The KubeLinter tool by StackRox is an open-source command-line interface to identify misconfigurations in Kubernetes objects.
    KubeLinter offers the ability to integrate checks on Kubernetes YAML files and Helm charts before deployment into a Kubernetes cluster.
    With 31 standard built-in checks and the room to configure your own, you get immediate feedback about misconfigurations and Kubernetes security violations.
  params:
    - description: The Trusted Artifact URI pointing to the artifact with the application source code.
      name: SOURCE_ARTIFACT
      type: string
    - name: config_file_url
      type: string
      description: url from where the config file would be fetched.
      default: ""
    - name: config_file_path
      type: string
      description: path to config file.
      default: ""
    - name: manifest
      type: string
      description: path to manifest files or manifest directory to be checked.
      default: "."
    - name: includelist
      type: string
      description: "A string with comma separated checks to be included"
      default: ""
    - name: excludelist
      type: string
      description: "A string with comma separated checks to be excluded"
      default: ""
    - name: default_option
      type: string
      description: "provides two options (adding all built-in checks or disabling all default checks): add-all-built-in and/do-not-auto-add-defaults"
      default: ""
    - name: output_format
      type: string
      description: format in which report will be generated. (json|sarif|plain) (default:"json")
      default: json
    - name: args
      type: array
      description: "args"
      default: []
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    workingDir: /var/workdir/source
  steps:
    - image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:3732f40fc8a6148eec58400421f7b15076c5db8be5243ec43d99a227023df577
      name: use-trusted-artifact
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source

    - name: fetch-config-file
      image: registry.access.redhat.com/ubi8/ubi-minimal:8.10-1179
      script: |
         #!/usr/bin/env bash
         set -e
         if [ -n "$(params.config_file_url)" ]
         then
          curl "$(params.config_file_url)" --output "$(params.config_file_path)"
          echo "Fetched the config file from given ($(params.config_file_url)) URL and successfully saved at /var/workdir/source/$(params.config_file_path)"
         else
          echo "No config file url was set"
         fi
    - name: lint-yaml
      image: ghcr.io/stackrox/kube-linter:v0.7.2-alpine@sha256:82cf10ba6202559c482e74497846116ecdbeeb731ca5083a43b7809ddd2ea9ee
      script: |
        if [ -n "$(params.config_file_path)" ]
        then
          /kube-linter lint  "$(params.manifest)" --config "$(params.config_file_path)" --format "$(params.output_format)" "$@"
        else
          if [ -n "$(params.default_option)" ]
          then
            /kube-linter lint "$(params.manifest)" --"$(params.default_option)" --include "$(params.includelist)" --exclude "$(params.excludelist)" --format "$(params.output_format)" "$@"
          else
            /kube-linter lint "$(params.manifest)" --include "$(params.includelist)" --exclude "$(params.excludelist)" --format "$(params.output_format)" "$@"
          fi
        fi
      args:
      - $(params.args)

  volumes:
    - name: workdir
      emptyDir: {}
